{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","react_default","a","createElement","style","width","height","background","isLit","onClick","e","preventDefault","flipCellsAround","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","_this$props","flipCell","setState","_this2","tBoard","_loop","src_Cell","key","Component","defaultProps","App","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAmBeA,MAjBf,SAAcC,GAKZ,OACEC,EAAAC,EAAAC,cAAA,MACEC,MAAO,CACLC,MAAO,QACPC,OAAQ,QACRC,WAAYP,EAAMQ,MAAQ,OAAS,SAErCC,QAXJ,SAAqBC,GACnBA,EAAEC,iBACFX,EAAMY,sBCFJC,cAMJ,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KACDqB,MAAQ,CACXC,MAAOR,EAAKS,eAHGT,6EAQjB,IADA,IAAIQ,EAAQ,GACHE,EAAI,EAAGA,EAAIP,KAAKjB,MAAMyB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIV,KAAKjB,MAAM4B,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWd,KAAKjB,MAAMgC,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,0CAEOW,GAAO,IAAAC,EACRD,EAAME,MAAM,KAAKC,IAAIC,QADbC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAmB,EAAA,GAChBV,EADgBc,EAAA,GACbX,EADaW,EAAA,GAAAE,EAEEvB,KAAKjB,MAAtB4B,EAFeY,EAEfZ,MAAOH,EAFQe,EAERf,MACTH,EAAQL,KAAKI,MAAMC,MACjBmB,EAAW,SAACjB,EAAGG,GACfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,KAG5Bc,EAASjB,EAAGG,GACZc,EAASjB,EAAGG,EAAI,GAChBc,EAASjB,EAAGG,EAAI,GAChBc,EAASjB,EAAI,EAAGG,GAChBc,EAASjB,EAAI,EAAGG,GAChBV,KAAKyB,SAAS,CAAEpB,2CAIhB,IAFO,IAAAqB,EAAA1B,KACH2B,EAAS,GACJpB,EAAI,EAAGA,EAAIP,KAAKjB,MAAMyB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GAD+BmB,EAAA,SAEhClB,GACP,IAAIM,EAAQT,EAAI,IAAMG,EACtBD,EAAIG,KACF5B,EAAAC,EAAAC,cAAC2C,EAAD,CACEC,IAAKd,EACLzB,MAAOmC,EAAKtB,MAAMC,MAAME,GAAGG,GAC3Bf,gBAAiB,kBAAM+B,EAAK/B,gBAAgBqB,QANzCN,EAAI,EAAGA,EAAIV,KAAKjB,MAAM4B,MAAOD,IAAKkB,EAAlClB,GAUTiB,EAAOf,KAAK5B,EAAAC,EAAAC,cAAA,MAAI4C,IAAKvB,GAAIE,IAE3B,OACEzB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aAAQyC,WAzDII,aAAdnC,EACGoC,aAAe,CACpBxB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KA2DVnB,QC1DAqC,MAJf,WACE,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07e91475.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Cell(props) {\r\n  function handleClick(e) {\r\n    e.preventDefault();\r\n    props.flipCellsAround();\r\n  }\r\n  return (\r\n    <td\r\n      style={{\r\n        width: '100px',\r\n        height: '100px',\r\n        background: props.isLit ? 'blue' : 'black'\r\n      }}\r\n      onClick={handleClick}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    chanceLightStartsOn: 0.25\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board: this.createBoard()\r\n    };\r\n  }\r\n  createBoard() {\r\n    let board = [];\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        row.push(Math.random() < this.props.chanceLightStartsOn);\r\n      }\r\n      board.push(row);\r\n    }\r\n    return board;\r\n  }\r\n  flipCellsAround(coord) {\r\n    let [y, x] = coord.split('-').map(Number);\r\n    let { ncols, nrows } = this.props;\r\n    let board = this.state.board;\r\n    const flipCell = (y, x) => {\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    };\r\n    flipCell(y, x);\r\n    flipCell(y, x - 1);\r\n    flipCell(y, x + 1);\r\n    flipCell(y - 1, x);\r\n    flipCell(y + 1, x);\r\n    this.setState({ board });\r\n  }\r\n  render() {\r\n    let tBoard = [];\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        let coord = y + '-' + x;\r\n        row.push(\r\n          <Cell\r\n            key={coord}\r\n            isLit={this.state.board[y][x]}\r\n            flipCellsAround={() => this.flipCellsAround(coord)}\r\n          />\r\n        );\r\n      }\r\n      tBoard.push(<tr key={y}>{row}</tr>);\r\n    }\r\n    return (\r\n      <table>\r\n        <tbody>{tBoard}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Board from './Board';\r\n\r\nfunction App() {\r\n  return <Board />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}